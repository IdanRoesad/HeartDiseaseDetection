# -*- coding: utf-8 -*-
"""Demo_ML_Stacking

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FiaDbz336HMmTxxEVuAl7FJ_LhYSc8tZ

## Importing Libararies
"""

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from scipy.stats import boxcox
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, StratifiedKFold
from sklearn.metrics import classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
# %matplotlib inline

plt.rcParams['figure.dpi'] = 200
sns.set(rc={'axes.facecolor': '#faded9'}, style='darkgrid')

"""## Reading The Datasets"""

!unzip data_heart.zip;
df = pd.read_csv('/content/sample_data/data_heart.zip');
df

"""## Base Learner"""

base_learners = [
    ('lr', LogisticRegression(random_state=42)),
    ('dt_base', DecisionTreeClassifier(max_depth=None, min_samples_split=2, random_state=42)),
    ('rf', RandomForestClassifier(n_estimators=50, random_state=42)),
    ('svc', SVC(probability=True, random_state=42)),
    ('knn', KNeighborsClassifier(n_neighbors=7)),
]

"""## Testing"""

import pandas as pd

df = pd.read_csv('/content/sample_data/data_heart.zip')


X = df.drop('target', axis=1)
y = df['target']

print(X[:302])

print(y[:302])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7)

print(len(X_train))
print(len(X_test))

"""## Descision Tree"""

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

dt = DecisionTreeClassifier(
  max_depth = None,
  min_samples_split = 2
)

dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
score = metrics.accuracy_score(y_test, y_pred)
print("Akurasi dengan menggunakan Decision Tree: ", score)

meta_classifier = DecisionTreeClassifier(random_state=42)

"""## Setting Up Stack With Decision Tree"""

stacking_model = StackingClassifier(
    estimators=base_learners,
    final_estimator=meta_classifier,
    cv=5,
    stack_method='auto',
    n_jobs=-1,
    passthrough=False
)

estimators = [
    ('lr', LogisticRegression(random_state=42)),
    ('dt_base', DecisionTreeClassifier(max_depth=None, min_samples_split=2, random_state=42)),
    ('rf', RandomForestClassifier(n_estimators=50, random_state=42)),
    ('svc', SVC(probability=True, random_state=42)),
    ('knn', KNeighborsClassifier(n_neighbors=7))
]

final_estimator = DecisionTreeClassifier(max_depth=None, min_samples_split=2, random_state=42)


stacking_clf = StackingClassifier(
    estimators=estimators,
    final_estimator=final_estimator,
    cv=5
)

print("Training the Stacking Classifier...")

stacking_clf.fit(X_train, y_train)
print("Training complete.")
print("-" * 30)



y_pred_stacking = stacking_clf.predict(X_test)


score_stacking = metrics.accuracy_score(y_test, y_pred_stacking)

print(f"Akurasi dengan menggunakan Stacking DT: {score_stacking:.4f}")

"""##Stacking Using Logistic Regression"""

from sklearn.linear_model import LogisticRegression
from sklearn import metrics

lr = LogisticRegression()

lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
score = metrics.accuracy_score(y_test, y_pred)
print("Akurasi dengan menggunakan Logistic Regression: ", score)

estimators = [
    ('lr', LogisticRegression(random_state=42)),
    ('dt_base', DecisionTreeClassifier(max_depth=None, min_samples_split=2, random_state=42)),
    ('rf', RandomForestClassifier(n_estimators=50, random_state=42)),
    ('svc', SVC(probability=True, random_state=42)),
    ('knn', KNeighborsClassifier(n_neighbors=7)) # probability=True is required for stacking
]

final_estimator = LogisticRegression(random_state=42)

stacking_clf = StackingClassifier(
    estimators=estimators,
    final_estimator=final_estimator,
    cv=5
)

print("Training the Stacking Classifier...")

stacking_clf.fit(X_train, y_train)
print("Training complete.")
print("-" * 30)



y_pred_stacking = stacking_clf.predict(X_test)


score_stacking = metrics.accuracy_score(y_test, y_pred_stacking)

print(f"Akurasi dengan menggunakan Stacking LR: {score_stacking:.4f}")

"""##Stacking Using KNN"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

knn = KNeighborsClassifier()

knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
score = metrics.accuracy_score(y_test, y_pred)
print("Akurasi dengan menggunakan Nearest Neighbor: ", score)

estimators = [
    ('lr', LogisticRegression(random_state=42)),
    ('dt_base', DecisionTreeClassifier(max_depth=None, min_samples_split=2, random_state=42)),
    ('rf', RandomForestClassifier(n_estimators=50, random_state=42)),
    ('svc', SVC(probability=True, random_state=42)),
    ('knn', KNeighborsClassifier(n_neighbors=7))
]

final_estimator = KNeighborsClassifier(n_neighbors=7)

stacking_clf = StackingClassifier(
    estimators=estimators,
    final_estimator=final_estimator,
    cv=5
)

print("Training the Stacking Classifier...")

stacking_clf.fit(X_train, y_train)
print("Training complete.")
print("-" * 30)

y_pred_stacking = stacking_clf.predict(X_test)

score_stacking = metrics.accuracy_score(y_test, y_pred_stacking)

print(f"Akurasi dengan menggunakan Stacking KNN: {score_stacking:.4f}")

